'''
spacy_demo.py

Goal - write a proof-of-concept script that:
- Bootstraps crypto-currency NER via IOB/BILUO (all as "MONEY")
- Trains a targeted language model (either from a pre-trained English model, or from a blank one)
  - Test this to see what performs better!
- Builds mappings between crypto-currency ticker symbols and possible aliases
  - Examine the entities auto-classified by spacy as MONEY, and possibly augment ticker_aliases

author: wrhm

TODO:
 - make sure MONEY annotations include currency values (verify that MONEY applies to "25 USD", and not just to "USD")

Links:
- https://spacy.io/usage/training , esp the section "How do I get training data?"
- https://spacy.io/usage/linguistic-features#entity-types
- Test article: https://www.forbes.com/sites/chuckjones/2018/08/04/bitcoin-falls-under-7000/#769c8c227477
- Borrows heavily from https://github.com/explosion/spaCy/blob/master/examples/training/train_ner.py
'''

import random
import spacy

# spacy.nlp()
print(dir(spacy))
exit()

# refactor this line to load mappings from a file
ticker_aliases = {'Bitcoin' : 'BTC', 'bitcoin' : 'BTC', 'BTC' : 'BTC'}

# for demo purposes only. later, data would be loaded from files
article_text = '''Bitcoin rose to an intra-day high of $8,486 and close of $8,396 on July 24 after rebounding from its recent low close of $5,871 on June 28 and its intra-day low of $5,538 on July 2. However, since Tuesday Bitcoin has fallen over $1,000 to just under $7,000 on Saturday. ... Shortly after this preemptive action, unfortunately, the BTC price tumbled, causing the liquidation of the account.'''

# hacky splitting technique. will want to use spacy.nlp(article_text)
sentences = [' '.join(s.split()) for s in article_text.split('.') if len(s) > 1]

# to adapt for a pre-trained language model, replace "[]" with the existing LM's hypothesized annotations
# (those would be generated by spacy.nlp())
train_data = [(sen, []) for sen in sentences]


def augment_annotations():
    # generate crypto-currency annotations for the training data corpus
    for i, sen in enumerate(sentences):
        for alias in ticker_aliases:
            if alias not in sen:
                continue
            ind_start = sen.index(alias)
            ind_end = ind_start + len(alias)
            alias_annotation = (ind_start, ind_end, "MONEY")
            if alias_annotation not in train_data[i][1]:
                train_data[i][1].append(alias_annotation)



if __name__ == '__main__':
    # for comparison's sake, print the training data without the newly-created cryptocurrency annotations
    print('before:')
    for e in train_data:
        print(e)

    augment_annotations()

    # display augmented annotations
    print('after:')
    for e in train_data:
        print(e)